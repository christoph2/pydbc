<%
network = db.session.query(model.LinNetwork).first()
%>\
LIN_description_file;
LIN_protocol_version = "${network.protocol_version}";
LIN_language_version = "${network.language_version}";
%if not network.file_revision is None:
LDF_file_revision = "${network.file_revision}";
%endif
LIN_speed = ${network.speed} kbps;
%if not network.channel_name is None:
Channel_name = ${network.channel_name};
%endif

Nodes {
<%
    masterNode = db.session.query(model.LinMasterNode).first()
    slaveNodes = db.session.query(model.LinSlaveNode).all()
%>\
    Master: ${masterNode.name}, ${masterNode.timebase}ms, ${masterNode.jitter}ms;
    Slaves: ${', '.join([s.name for s in slaveNodes])};
}

Signals {
%for signal in db.session.query(model.LinSignal).order_by(model.LinSignal.rid).all():
    ${"{0:25s}".format(signal.name)}: ${signal.bitsize}, \
    %if isinstance(signal.init_value, list) :
{ ${', '.join(["0x{:02x}".format(x) for x in signal.init_value])} }, \
    %else:
${"0x{:02x}".format(signal.init_value)}, \
    %endif
${signal.publisher.name}, ${', '.join([s.name for s in signal.subscribers])};
%endfor
}

Diagnostic_signals {

}

Frames {
%for frame in db.session.query(model.LinUnconditionalFrame).filter(\
model.LinUnconditionalFrame.type == "LinUnconditionalFrame").order_by(model.LinUnconditionalFrame.lin_unconditional_frame_id).all():
<% senderName = db.session.query(model.Node.name).filter(model.Node.rid == frame.sender).scalar() %>\
    ${frame.name}: ${"0x{:02x}".format(frame.frame_id)}, ${frame.publisher.name}, ${frame.dlc} {
<% frame_signals = db.session.query(model.Signal.name, model.Message_Signal.offset).\
    join(model.Message_Signal).filter(model.Message_Signal.message_id == frame.message_id).\
    order_by(model.Message_Signal.offset).all() %>\
%for fs in frame.signals:
<% fs_assoc = db.session.query(model.LinUnconditionalFrameSignal).filter(
    model.LinUnconditionalFrameSignal.unconditional_frame == frame, model.LinUnconditionalFrameSignal.signal == fs).first() %>\
        ${fs.name}, ${fs_assoc.signal_offset};
%endfor
    }
%endfor
}

Sporadic_frames {
%for frame in db.session.query(model.LinSporadicFrame).all():
    ${frame.name}: ${', '.join([f.name for f in frame.associated_frames])};
%endfor
}

Event_triggered_frames {
%for frame in db.session.query(model.LinEventTriggeredFrame).all():
    ${frame.name}: ${frame.collision_resolving_schedule_table.name}, ${frame.frame_id}, ${', '.join([f.name for f in frame.associated_frames])};
%endfor
}

Diagnostic_frames {

}

Node_attributes {
%for node in slaveNodes:
<% #attrs = nodeAttrs[node.rid] 
fault_state_signals = db.session.query(model.LinFaultStateSignal).filter(model.LinFaultStateSignal.node == node).all()
response_error = db.session.query(model.LinResponseErrorSignal).filter(model.LinResponseErrorSignal.node == node).first()
%>\
    ${node.name} {
%if not node.protocol_version is None:
        LIN_protocol = "${node.protocol_version}";
%endif
%if not node.configured_NAD is None:
        configured_NAD = ${"0x{:02x}".format(node.configured_NAD)};
%endif
%if not node.initial_NAD is None:
        initial_NAD = ${"0x{:02x}".format(node.initial_NAD)};
%endif
%if not node.supplier_id is None:
        product_id = ${"0x{:04x}".format(node.supplier_id)},\
%endif
%if not node.function_id is None:
 ${"0x{:04x}".format(node.function_id)}\
%endif
%if not node.variant is None:
, ${"0x{:04x}".format(node.variant)}\
%endif
;
%if not response_error is None:
        response_error = ${response_error.signal.name};
%endif
%if fault_state_signals:
        fault_state_signals = ${", ".join([s.signal.name for s in fault_state_signals])};
%endif
%if not node.p2_min is None:
        P2_min = ${node.p2_min} ms;
%endif
%if not node.st_min is None:
        ST_min = ${node.st_min} ms;
%endif
%if not node.n_as_timeout is None:
        N_As_timeout = ${node.n_as_timeout} ms;
%endif
%if not node.n_cr_timeout is None:
        N_Cr_timeout = ${node.n_cr_timeout} ms;
%endif
<% configurable_frames = db.session.query(model.LinConfigurableFrame).\
    filter(model.LinConfigurableFrame.node == node).all() %>\
%if configurable_frames:
        configurable_frames {
%for frame in configurable_frames:
            ${frame.frame.name};
%endfor
        }
%endif
    }
%endfor

Schedule_tables {
%for table in db.session.query(model.LinScheduleTable).order_by(model.LinScheduleTable.rid).all():
    ${table.name} {
%for command in table.entries:
%if command.type == "LinScheduleTable_Command_Frame":
        ${command.frame.name} delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_MasterReq":
        MasterReq delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_SlaveResp":
        SlaveResp delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_AssignNad":
        AssignNAD { ${command.node.name} } delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_ConditionalChangeNad":
        ConditionalChangeNAD { ${"0x{:02x}".format(command.nad)}, ${"0x{:02x}".format(command.id)}, \
${"0x{:02x}".format(command.byte)}, ${"0x{:02x}".format(command.mask)}, ${"0x{:02x}".format(command.inv)}, \
${"0x{:02x}".format(command.new_nad)} } delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_DataDump":
        DataDump { ${command.node.name}, ${"0x{:02x}".format(command.d1)}, ${"0x{:02x}".format(command.d2)}, \
${"0x{:02x}".format(command.d3)}, ${"0x{:02x}".format(command.d4)}, ${"0x{:02x}".format(command.d5)} } \
delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_SaveConfiguration":
        SaveConfiguration { ${command.node.name} } delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_AssignFrameIdRange":
        AssignFrameIdRange {${command.node.name}, ${command.frame_index} \
%if command.frame_pid1:
${"0x{:02x}".format(frame_pid1)} \
%endif
%if command.frame_pid2:
, ${"0x{:02x}".format(frame_pid2)} \
%endif
%if command.frame_pid3:
, ${"0x{:02x}".format(frame_pid3)} \
%endif
%if command.frame_pid4:
, ${"0x{:02x}".format(frame_pid4)} \
%endif
} delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_FreeFormat":
        FreeFormat { ${"0x{:02x}".format(command.d1)}, ${"0x{:02x}".format(command.d2)}, \
${"0x{:02x}".format(command.d3)}, ${"0x{:02x}".format(command.d4)}, ${"0x{:02x}".format(command.d5)}, \
${"0x{:02x}".format(command.d6)}, ${"0x{:02x}".format(command.d7)}, ${"0x{:02x}".format(command.d8)} \
} delay ${command.frame_time} ms;
%elif command.type == "LinScheduleTable_Command_AssignFrameId":
        AssignFrameId { ${command.node.name}, ${command.frame.name} } delay ${command.frame_time} ms;
%endif
%endfor
    }
%endfor
}

Signal_encoding_types {
%for enc in db.session.query(model.LinSignalEncodingType).all():
    ${enc.name} {
%for entry in enc.entries:
%if entry.type == "LinSignalEncodingEntry_Logical":
        logical_value, ${int(entry.signal_value)}, "${entry.text_info}";
%elif entry.type == "LinSignalEncodingEntry_Physical":
        physical_value, ${int(entry.min_value)}, ${int(entry.max_value)}, ${entry.scale}, \
${entry.offset}, "${entry.text_info}";
%endif
%endfor
    }
%endfor
}

Signal_representation {
%for enc in db.session.query(model.LinSignalEncodingType).all():
<% sr = db.session.query(model.Signal.name).join(model.LinSignalRepresentation).\
filter(model.LinSignalRepresentation.signal_encoding_type == enc).all() %>\
%if sr:
    ${enc.name}: ${', '.join([s[0] for s in sr])};
%endif
%endfor
}
