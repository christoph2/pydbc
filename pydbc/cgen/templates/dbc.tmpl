VERSION "${db.dbcVersion()}"


NS_ : 
	NS_DESC_
	CM_
	BA_DEF_
	BA_
	VAL_
	CAT_DEF_
	CAT_
	FILTER
	BA_DEF_DEF_
	EV_DATA_
	ENVVAR_DATA_
	SGTYPE_
	SGTYPE_VAL_
	BA_DEF_SGTYPE_
	BA_SGTYPE_
	SIG_TYPE_REF_
	VAL_TABLE_
	SIG_GROUP_
	SIG_VALTYPE_
	SIGTYPE_VALTYPE_
	BO_TX_BU_
	BA_DEF_REL_
	BA_REL_
	BA_DEF_DEF_REL_
	BU_SG_REL_
	BU_EV_REL_
	BU_BO_REL_
	SG_MUL_VAL_

BS_:

%if db.nodeNames:
BU_: ${' '.join(db.nodeNames)}
%else:
BU_:
%endif
%for vt in db.valueTablesGlobal():
VAL_TABLE_ ${vt['Name']} \
%for desc in db.valueDescription(vt['RID']):
${int(desc['Value'])} "${desc['Value_Description']}" \
%endfor
;
%endfor


%for msg in db.messages():
BO_ ${msg['Message_ID']} ${msg['Name']}: ${msg['DLC']} ${db.nodeName(msg['Sender'])}
%for signal in db.signals(msg['RID']):
<% receivers = db.fetchSignalReceivers(msg['RID'], signal['RID']) %>\
 SG_ ${signal['Name']} ${db.multiplexIndicator(signal)}: ${signal['Offset']}|${signal['Bitsize']}@${signal['Byteorder']}\
${"-" if signal['Sign'] == -1 else "+"} \
(${"{:.14G}".format(signal['Formula_Factor'])},${"{:.14G}".format(signal['Formula_Offset'])}) [${"{:.14G}".format(signal['Minimum'])}|\
${"{:.14G}".format(signal['Maximum'])}] "${signal['Unit']}" ${db.spaceBeforeNodes(receivers)}${','.join(receivers)}
%endfor

%endfor
%for mid, senders in db.multipleTransmitters():
BO_TX_BU_ ${mid} : ${','.join(senders)};
%endfor


%for idx, var in enumerate(db.environmentVariables(), 1):
<% nodes = list(db.envVarAccessNodes(var['RID'])) %>\
EV_ ${var['Name']}: ${var['Type']} [${"{:.14G}".format(var['Minimum'])}|${"{:.14G}".format(var['Maximum'])}] "${var['Unit']}" \
${"{:.14G}".format(var['Startup_Value'])} ${idx} DUMMY_NODE_VECTOR${var['Access']} ${db.spaceBeforeNodes(nodes)}\
${','.join(nodes)};

%endfor
%for item in db.environmentVariablesData():
ENVVAR_DATA_ ${item['name']}: ${item['value']};
%endfor
%for comment in db.comments():
CM_ \
%if comment['type'] == 'NW':
"${comment['comment']}";
%elif comment['type'] == 'BO':
BO_ ${comment['k0']} "${comment['comment']}";
%elif comment['type'] == 'SG':
SG_ ${comment['k0']} ${comment['k1']} "${comment['comment']}";
%elif comment['type'] == 'BU':
BU_ ${comment['k0']} "${comment['comment']}";
%elif comment['type'] == 'EV':
EV_ ${comment['k0']} "${comment['comment']}";
%endif
%endfor
%for attr in db.attributeDefinitions():
%if attr['Objecttype'] in (0, 1, 2, 3, 4):
BA_DEF_ \
%else:
BA_DEF_REL_ \
%endif
%if attr['Objecttype'] == 0:
BU_ \
%elif attr['Objecttype'] == 1:
BO_ \
%elif attr['Objecttype'] == 2:
SG_ \
%elif attr['Objecttype'] == 3:
EV_ \
%elif attr['Objecttype'] == 5:
BU_BO_REL_ \
%elif attr['Objecttype'] == 6:
BU_SG_REL_ \
%elif attr['Objecttype'] == 7:
BU_EV_REL_ \
%endif
 "${attr['Name']}" \
%if attr['Valuetype'] == 0:
INT ${"{:.14G}".format(attr['Minimum'])} ${"{:.14G}".format(attr['Maximum'])}\
%elif attr['Valuetype'] == 1:
HEX ${"{:.14G}".format(attr['Minimum'])} ${"{:.14G}".format(attr['Maximum'])}\
%elif attr['Valuetype'] == 2:
FLOAT ${"{:.14G}".format(attr['Minimum'])} ${"{:.14G}".format(attr['Maximum'])}\
%elif attr['Valuetype'] == 3:
STRING \
%elif attr['Valuetype'] == 4:
ENUM  ${','.join(['"{}"'.format(n) for n in attr['Enumvalues'].split(";")])}\
%endif
;
%endfor
%for attr in db.attributeDefinitions():
%if attr['Default_Number'] is not None:
%if attr['Objecttype'] in (0, 1, 2, 3, 4):
BA_DEF_DEF_  \
%else:
BA_DEF_DEF_REL_ \
%endif
"${attr['Name']}" ${"{:.14G}".format(attr['Default_Number'])};
%elif attr['Default_String'] is not None:
%if attr['Objecttype'] in (0, 1, 2, 3, 4):
BA_DEF_DEF_  \
%else:
BA_DEF_DEF_REL_ \
%endif
"${attr['Name']}" "${attr['Default_String']}";
%endif
%endfor
%for attr in db.attributeValues():
<% attrDef = list(db.attributeDefintion(attr['Attribute_Definition']))[0] %>\
BA_ "${attrDef['Name']}" \
%if attrDef['Objecttype'] == 0:
BU_ ${db.fetchNodenameByRid(attr['Object_ID'])} \
%elif attrDef['Objecttype'] == 1:
BO_ ${db.fetchMessageIdByRid(attr['Object_ID'])} \
%elif attrDef['Objecttype'] == 2:
<% ms = db.fetchMessageSignalByRid(attr['Object_ID']) %>\
SG_ ${ms['Message_ID']} ${ms['Name']} \
%elif attrDef['Objecttype'] == 3:
EV_ ${db.fetchEnvvarNameByRid(attr['Object_ID'])} \
%elif attrDef['Objecttype'] == 4:
\
%endif
%if attrDef['Valuetype'] == 0:
${int(attr['Num_Value'])}\
%elif attrDef['Valuetype'] == 1:
${int(attr['Num_Value'])}\
%elif attrDef['Valuetype'] == 2:
${"{:.14G}".format(attr['Num_Value'])}\
%elif attrDef['Valuetype'] == 3:
"${attr['String_Value']}"\
%elif attrDef['Valuetype'] == 4:
${int(attr['Num_Value'])}\
%endif
;
%endfor
%for attr in db.relativeAttributeValues():
<% attrDef = list(db.attributeDefintion(attr['Attribute_Definition']))[0] %>\
BA_REL_ "${attrDef['Name']}" \
%if attrDef['Objecttype'] == 5:
BU_BO_REL_ \
%elif attrDef['Objecttype'] == 6:
BU_SG_REL_ \
%elif attrDef['Objecttype'] == 7:
BU_EV_REL_ \
%endif
${db.fetchNodenameByRid(attr['Opt_Object_ID_1'])} \
%if attrDef['Objecttype'] == 6:
SG_ \
%endif
%if attrDef['Objecttype'] in (5, 6):
${attr['Opt_Object_ID_2']} \
%endif
%if attrDef['Objecttype'] == 6:
<% signal = db.fetchSignalByRid(attr['Object_ID']) %>\
${signal['Name']} \
%elif attrDef['Objecttype'] == 7:
${db.fetchEnvvarNameByRid(attr['Object_ID'])} \
%endif
%if attrDef['Valuetype'] == 0:
${int(attr['Num_Value'])}\
%elif attrDef['Valuetype'] == 1:
${int(attr['Num_Value'])}\
%elif attrDef['Valuetype'] == 2:
${"{:.14G}".format(attr['Num_Value'])}\
%elif attrDef['Valuetype'] == 3:
"${attr['String_Value']}"\
%elif attrDef['Valuetype'] == 4:
${int(attr['Num_Value'])}\
%endif
;
%endfor
%for vt in db.valueTablesLocal():
VAL_ \
%if vt['Object_Type'] == 0:
${vt['Message_ID']} ${vt['Name']} \
%else:
${vt['Name']} \
%endif
%for desc in db.valueDescription(vt['RID'], srt = False):
${int(desc['Value'])} "${desc['Value_Description']}" \
%endfor
;
%endfor
%for sigGroup in db.fetchSignalGroups():
SIG_GROUP_ ${sigGroup['Message_Id']} ${sigGroup['Name']} ${sigGroup['Value']} : ${' '.join(sigGroup['Signals'])};
%endfor
<% signalValueTypes = db.fetchExtendedSignalValueTypes() %>\
%if signalValueTypes:
%for item in signalValueTypes:
SIG_VALTYPE_ ${item['Message_ID']} ${item['Name']} : ${item['Valuetype']};
%endfor
%endif
%for cat in db.categoryDefinitions():
CAT_DEF_ ${cat['Key']} ${cat['Name']} ${cat['Level']};
%endfor
%for cat in db.categoryValues():
CAT_ \
%if cat['Objecttype'] == 0:
BU_ ${db.fetchNodenameByRid(cat['Object_ID'])} \
%elif cat['Objecttype'] == 1:
BO_ ${db.fetchMessageIdByRid(cat['Object_ID'])} \
%elif cat['Objecttype'] == 2:
EV_ ${db.fetchEnvvarNameByRid(cat['Object_ID'])} \
%endif
${cat['Category_Definition']};
%endfor
